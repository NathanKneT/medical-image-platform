/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Medical Image Analysis Platform
 * A production-ready API for medical image processing with real-time updates
 * OpenAPI spec version: 1.0.0
 */
import { customApi } from './api';
/**
 * User requesting the analysis
 */
export type AnalysisRequestUserId = string | null;

/**
 * Analysis priority: low, normal, high
 */
export type AnalysisRequestPriority = string | null;

/**
 * Request schema for starting AI analysis.
 */
export interface AnalysisRequest {
  /** ID of image to analyze */
  image_id: string;
  /** ID of AI model to use */
  model_id: string;
  /** User requesting the analysis */
  user_id?: AnalysisRequestUserId;
  /** Analysis priority: low, normal, high */
  priority?: AnalysisRequestPriority;
}

export type AnalysisResponseConfidenceScore = number | null;

export type AnalysisResponseResultsAnyOf = { [key: string]: unknown };

export type AnalysisResponseResults = AnalysisResponseResultsAnyOf | null;

export type AnalysisResponseErrorMessage = string | null;

export type AnalysisResponseErrorCode = string | null;

export type AnalysisResponseProcessingTimeSeconds = number | null;

export type AnalysisResponseImageFilename = string | null;

export type AnalysisResponseAnalysisModelName = string | null;

export type AnalysisResponseAnalysisModelVersion = string | null;

/**
 * Complete analysis result response schema.
 */
export interface AnalysisResponse {
  id: string;
  image_id: string;
  ai_model_id: string;
  status: AnalysisStatus;
  /**
   * @minimum 0
   * @maximum 100
   */
  progress_percentage: number;
  confidence_score?: AnalysisResponseConfidenceScore;
  results?: AnalysisResponseResults;
  error_message?: AnalysisResponseErrorMessage;
  error_code?: AnalysisResponseErrorCode;
  processing_time_seconds?: AnalysisResponseProcessingTimeSeconds;
  created_at: string;
  updated_at: string;
  image_filename?: AnalysisResponseImageFilename;
  analysis_model_name?: AnalysisResponseAnalysisModelName;
  analysis_model_version?: AnalysisResponseAnalysisModelVersion;
}

/**
 * WebSocket URL for real-time updates
 */
export type AnalysisStartResponseWebsocketUrl = string | null;

/**
 * Response schema for analysis start request.
 */
export interface AnalysisStartResponse {
  /** Unique analysis identifier for tracking */
  analysis_id: string;
  /** Initial analysis status */
  status: AnalysisStatus;
  /** Success message */
  message: string;
  /** Estimated completion time in seconds */
  estimated_completion_time: number;
  /** WebSocket URL for real-time updates */
  websocket_url?: AnalysisStartResponseWebsocketUrl;
}

/**
 * Analysis status enumeration.
 */
export type AnalysisStatus = typeof AnalysisStatus[keyof typeof AnalysisStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnalysisStatus = {
  PENDING: 'PENDING',
  ANALYZING: 'ANALYZING',
  COMPLETE: 'COMPLETE',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
} as const;

export interface BodyUploadImageApiV1ImagesUploadPost {
  file: Blob;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type ImageResponseWidth = number | null;

export type ImageResponseHeight = number | null;

export type ImageResponseModality = string | null;

export type ImageResponsePatientId = string | null;

export type ImageResponseDescription = string | null;

export type ImageResponseUploadedBy = string | null;

/**
 * Complete image metadata response schema.
 */
export interface ImageResponse {
  id: string;
  filename: string;
  file_size: number;
  mime_type: string;
  width?: ImageResponseWidth;
  height?: ImageResponseHeight;
  modality?: ImageResponseModality;
  patient_id?: ImageResponsePatientId;
  description?: ImageResponseDescription;
  is_processed?: boolean;
  uploaded_by?: ImageResponseUploadedBy;
  created_at: string;
  updated_at: string;
}

/**
 * Image width in pixels
 */
export type ImageUploadResponseWidth = number | null;

/**
 * Image height in pixels
 */
export type ImageUploadResponseHeight = number | null;

/**
 * Medical imaging modality
 */
export type ImageUploadResponseModality = string | null;

/**
 * Response schema for successful image upload.
 */
export interface ImageUploadResponse {
  /** Unique image identifier */
  id: string;
  /** Original filename */
  filename: string;
  /** File size in bytes */
  file_size: number;
  /** MIME type of the file */
  mime_type: string;
  /** Image width in pixels */
  width?: ImageUploadResponseWidth;
  /** Image height in pixels */
  height?: ImageUploadResponseHeight;
  /** Medical imaging modality */
  modality?: ImageUploadResponseModality;
  /** URL to download the uploaded image */
  upload_url: string;
  /** Upload timestamp */
  created_at: string;
  /** Success message */
  message: string;
}

export interface TokenRequest {
  email: string;
  password: string;
}

export interface TokenResponse {
  access_token: string;
  token_type?: string;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type UploadImageApiV1ImagesUploadPostParams = {
description?: string | null;
patient_id?: string | null;
user_id?: string | null;
};

export type ListImagesApiV1ImagesGetParams = {
skip?: number;
limit?: number;
user_id?: string | null;
modality?: string | null;
};

export type ListAnalysesApiV1AnalysisGetParams = {
skip?: number;
limit?: number;
status?: AnalysisStatus | null;
user_id?: string | null;
};

export type ListAiModelsApiV1AnalysisModelsGetParams = {
active_only?: boolean;
};

export type ListAiModelsApiV1AnalysisModelsGet200Item = { [key: string]: unknown };

export const getMedicalImageAnalysisPlatform = () => {
/**
 * @summary Login For Access Token
 */
const loginForAccessTokenApiV1LoginTokenPost = (
    tokenRequest: TokenRequest,
 ) => {
      return customApi<TokenResponse>(
      {url: `/api/v1/login/token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenRequest
    },
      );
    }
  
/**
 * Upload medical image for analysis.

This endpoint demonstrates several production patterns:
1. File validation and security checks
2. Async file I/O with aiofiles
3. Metadata extraction from medical images
4. Background task triggering
5. Proper error handling and rollback

Args:
    background_tasks: FastAPI background tasks for async processing
    file: Uploaded file from multipart form
    description: Optional description
    patient_id: Anonymized patient identifier
    user_id: User uploading the file
    db: Database session
    
Returns:
    ImageUploadResponse with image metadata and upload status
 * @summary Upload Image
 */
const uploadImageApiV1ImagesUploadPost = (
    bodyUploadImageApiV1ImagesUploadPost: BodyUploadImageApiV1ImagesUploadPost,
    params?: UploadImageApiV1ImagesUploadPostParams,
 ) => {const formData = new FormData();
formData.append(`file`, bodyUploadImageApiV1ImagesUploadPost.file)

      return customApi<ImageUploadResponse>(
      {url: `/api/v1/images/upload`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params
    },
      );
    }
  
/**
 * Get image metadata by ID.

Args:
    image_id: Unique image identifier
    db: Database session
    
Returns:
    ImageResponse with complete image metadata
 * @summary Get Image
 */
const getImageApiV1ImagesImageIdGet = (
    imageId: string,
 ) => {
      return customApi<ImageResponse>(
      {url: `/api/v1/images/${imageId}`, method: 'GET'
    },
      );
    }
  
/**
 * Delete image and associated file.

This endpoint demonstrates proper cleanup of both database
records and file system resources.

Args:
    image_id: Unique image identifier
    db: Database session
    
Returns:
    Success message
 * @summary Delete Image
 */
const deleteImageApiV1ImagesImageIdDelete = (
    imageId: string,
 ) => {
      return customApi<unknown>(
      {url: `/api/v1/images/${imageId}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Download image file.

In production, this would typically redirect to a signed URL
from cloud storage (S3, GCS) rather than serving files directly.

Args:
    image_id: Unique image identifier
    db: Database session
    
Returns:
    FileResponse with image content
 * @summary Download Image
 */
const downloadImageApiV1ImagesImageIdDownloadGet = (
    imageId: string,
 ) => {
      return customApi<unknown>(
      {url: `/api/v1/images/${imageId}/download`, method: 'GET'
    },
      );
    }
  
/**
 * List images with optional filtering.

Args:
    skip: Number of records to skip (pagination)
    limit: Maximum number of records to return
    user_id: Filter by user who uploaded
    modality: Filter by imaging modality
    db: Database session
    
Returns:
    List of ImageResponse objects
 * @summary List Images
 */
const listImagesApiV1ImagesGet = (
    params?: ListImagesApiV1ImagesGetParams,
 ) => {
      return customApi<ImageResponse[]>(
      {url: `/api/v1/images/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * Start AI analysis for an uploaded image.
...
 * @summary Start Analysis
 */
const startAnalysisApiV1AnalysisStartPost = (
    analysisRequest: AnalysisRequest,
 ) => {
      return customApi<AnalysisStartResponse>(
      {url: `/api/v1/analysis/start`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: analysisRequest
    },
      );
    }
  
/**
 * Get analysis result by ID.

This endpoint provides the current status and results of an analysis.
Clients can poll this endpoint or use WebSocket for real-time updates.

Args:
    analysis_id: Unique analysis identifier
    db: Database session
    
Returns:
    AnalysisResponse with current status and results
 * @summary Get Analysis Result
 */
const getAnalysisResultApiV1AnalysisAnalysisIdGet = (
    analysisId: string,
 ) => {
      return customApi<AnalysisResponse>(
      {url: `/api/v1/analysis/${analysisId}`, method: 'GET'
    },
      );
    }
  
/**
 * Delete analysis record.

This endpoint allows deletion of any analysis regardless of status.
For running analyses, it will cancel them first, then delete.
For completed analyses, it will just delete the record.
 * @summary Delete Analysis
 */
const deleteAnalysisApiV1AnalysisAnalysisIdDelete = (
    analysisId: string,
 ) => {
      return customApi<unknown>(
      {url: `/api/v1/analysis/${analysisId}`, method: 'DELETE'
    },
      );
    }
  
/**
 * List analysis results with optional filtering.

Args:
    skip: Number of records to skip (pagination)
    limit: Maximum number of records to return
    status: Filter by analysis status
    user_id: Filter by user who requested analysis
    db: Database session
    
Returns:
    List of AnalysisResponse objects
 * @summary List Analyses
 */
const listAnalysesApiV1AnalysisGet = (
    params?: ListAnalysesApiV1AnalysisGetParams,
 ) => {
      return customApi<AnalysisResponse[]>(
      {url: `/api/v1/analysis/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * List available AI models.

Args:
    active_only: Whether to return only active models
    db: Database session
    
Returns:
    List of AI model information
 * @summary List Ai Models
 */
const listAiModelsApiV1AnalysisModelsGet = (
    params?: ListAiModelsApiV1AnalysisModelsGetParams,
 ) => {
      return customApi<ListAiModelsApiV1AnalysisModelsGet200Item[]>(
      {url: `/api/v1/analysis/models/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * Root endpoint with API documentation links
 * @summary Root
 */
const rootGet = (
    
 ) => {
      return customApi<string>(
      {url: `/`, method: 'GET'
    },
      );
    }
  
/**
 * Comprehensive health check endpoint
 * @summary Health Check
 */
const healthCheckHealthGet = (
    
 ) => {
      return customApi<unknown>(
      {url: `/health`, method: 'GET'
    },
      );
    }
  
return {loginForAccessTokenApiV1LoginTokenPost,uploadImageApiV1ImagesUploadPost,getImageApiV1ImagesImageIdGet,deleteImageApiV1ImagesImageIdDelete,downloadImageApiV1ImagesImageIdDownloadGet,listImagesApiV1ImagesGet,startAnalysisApiV1AnalysisStartPost,getAnalysisResultApiV1AnalysisAnalysisIdGet,deleteAnalysisApiV1AnalysisAnalysisIdDelete,listAnalysesApiV1AnalysisGet,listAiModelsApiV1AnalysisModelsGet,rootGet,healthCheckHealthGet}};
export type LoginForAccessTokenApiV1LoginTokenPostResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getMedicalImageAnalysisPlatform>['loginForAccessTokenApiV1LoginTokenPost']>>>
export type UploadImageApiV1ImagesUploadPostResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getMedicalImageAnalysisPlatform>['uploadImageApiV1ImagesUploadPost']>>>
export type GetImageApiV1ImagesImageIdGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getMedicalImageAnalysisPlatform>['getImageApiV1ImagesImageIdGet']>>>
export type DeleteImageApiV1ImagesImageIdDeleteResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getMedicalImageAnalysisPlatform>['deleteImageApiV1ImagesImageIdDelete']>>>
export type DownloadImageApiV1ImagesImageIdDownloadGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getMedicalImageAnalysisPlatform>['downloadImageApiV1ImagesImageIdDownloadGet']>>>
export type ListImagesApiV1ImagesGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getMedicalImageAnalysisPlatform>['listImagesApiV1ImagesGet']>>>
export type StartAnalysisApiV1AnalysisStartPostResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getMedicalImageAnalysisPlatform>['startAnalysisApiV1AnalysisStartPost']>>>
export type GetAnalysisResultApiV1AnalysisAnalysisIdGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getMedicalImageAnalysisPlatform>['getAnalysisResultApiV1AnalysisAnalysisIdGet']>>>
export type DeleteAnalysisApiV1AnalysisAnalysisIdDeleteResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getMedicalImageAnalysisPlatform>['deleteAnalysisApiV1AnalysisAnalysisIdDelete']>>>
export type ListAnalysesApiV1AnalysisGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getMedicalImageAnalysisPlatform>['listAnalysesApiV1AnalysisGet']>>>
export type ListAiModelsApiV1AnalysisModelsGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getMedicalImageAnalysisPlatform>['listAiModelsApiV1AnalysisModelsGet']>>>
export type RootGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getMedicalImageAnalysisPlatform>['rootGet']>>>
export type HealthCheckHealthGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getMedicalImageAnalysisPlatform>['healthCheckHealthGet']>>>
